# ------------------------------------------------------------------------------
# Build stage image 01
FROM linken_base:latest AS base_01

ARG BWAMEM2_VER=2.2.1
ARG MINIMAP2_VER=v2.24
ARG PICARD_VER=3.0.0/picard.jar
ARG FASTQC_VER=fastqc_v0.12.1.zip
ARG TRIMGALORE_VER=0.6.10.tar.gz
ARG GATK_VER=4.3.0.0
ARG CUTADAPT_VER=4.2
ARG CANU_VER=2.2

RUN echo "Compiling bwa from https://github.com/lh3/bwa" && cd / \
    && git clone https://github.com/lh3/bwa && cd bwa && make && mv bwa /usr/local/bin

RUN echo "Downloading pre-compiled bwa-mem2 from https://github.com/bwa-mem2/bwa-mem2" && cd / \
    && curl --output bwa-mem2.tar.bz2 -L https://github.com/bwa-mem2/bwa-mem2/releases/download/v"${BWAMEM2_VER}"/bwa-mem2-"${BWAMEM2_VER}"_x64-linux.tar.bz2 \
    && tar axf bwa-mem2.tar.bz2 \
    && mv bwa-mem2-"${BWAMEM2_VER}"_x64-linux/bwa-mem2* /usr/local/bin

RUN echo "Compiling minimap2 from https://github.com/lh3/minimap2" && cd / \
    && git clone --branch ${MINIMAP2_VER} https://github.com/lh3/minimap2 && cd minimap2 && make && mv minimap2 /usr/local/bin

RUN echo "Downloading picard from https://github.com/broadinstitute/picard/releases/" && cd / \
    && curl -L https://github.com/broadinstitute/picard/releases/download/${PICARD_VER} --output /usr/local/lib/picard.jar

RUN echo "Downloading FastQC from https://www.bioinformatics.babraham.ac.uk/" && cd / \
    && curl -L https://www.bioinformatics.babraham.ac.uk/projects/fastqc/${FASTQC_VER} --output fastqc.zip \
    && unzip fastqc.zip && mv FastQC /usr/local/lib/fastqc/ \
    && ln -s /usr/local/lib/fastqc/fastqc /usr/local/bin/fastqc

RUN echo "Downloading trimgalore from https://github.com/FelixKrueger/TrimGalore" && cd / \
    && curl -L https://github.com/FelixKrueger/TrimGalore/archive/${TRIMGALORE_VER} --output trimgalore.tar.gz \
    && mkdir trimgalore && tar xf trimgalore.tar.gz --directory=trimgalore --strip-components=1 \
    && mv trimgalore/trim_galore /usr/local/bin/trimgalore

RUN echo "Downloading GATK4 from https://github.com/broadinstitute/gatk" && cd / \
    && curl -L https://github.com/broadinstitute/gatk/releases/download/${GATK_VER}/gatk-${GATK_VER}.zip --output gatk.zip \
    && unzip gatk.zip && mv gatk-${GATK_VER} /usr/local/lib/gatk \
    && ln -s /usr/local/lib/gatk/gatk /usr/local/bin/gatk

RUN echo "Downloading muscle from https://github.com/rcedgar/muscle/" && cd / \
    && curl -L "https://github.com/rcedgar/muscle/releases/download/5.1.0/muscle5.1.linux_intel64" --output /usr/local/bin/muscle \
    && chmod +x /usr/local/bin/muscle

RUN echo "Zipping cutadapt with shiv" && cd / \
    && mkdir cutadapt && cd cutadapt \
    && python3 -m venv venv && . ./venv/bin/activate \
    && pip install shiv \
    && shiv -c cutadapt -o /usr/local/bin/cutadapt cutadapt==${CUTADAPT_VER}

COPY ./src/hermes hermes/
RUN echo "Building and installing linken-hermes" && cd /hermes \
    && CGO_ENABLED=0 /usr/local/go/bin/go build -ldflags="-s -w" \
    && mv linken-hermes /usr/local/bin/hermes

COPY ./src/eevee eevee/
RUN echo "Zipping eevee with shiv" && cd /eevee \
  && python3 -m venv venv && . ./venv/bin/activate \
  && pip install shiv \
  && shiv -c eevee -o /usr/local/bin/eevee --compressed .

COPY ./src/lunar lunar/
RUN echo "Zipping lunar with shiv" && cd /lunar \
  && python3 -m venv venv && . ./venv/bin/activate \
  && pip install shiv \
  && shiv -c lunar -o /usr/local/bin/lunar --compressed .

COPY scripts/linken.py /usr/local/bin/linken
RUN echo "Adding linken container entry script to $PATH as an executable" && cd / \
    && chmod +x /usr/local/bin/linken

RUN echo "Installing canu from precompiled zipped binary" && cd / \
    && curl --output canu.tar.gz -L https://github.com/marbl/canu/releases/download/v"${CANU_VER}"/canu-"${CANU_VER}".Linux-amd64.tar.xz \
    && tar axf canu.tar.gz && rm -rf canu.tar.gz \
    && mv canu-"${CANU_VER}" /opt/canu && ln -s /opt/canu/bin/canu /usr/local/bin


# ------------------------------------------------------------------------------
# Build stage image 02
FROM linken_base:latest AS base_02

ARG HTSLIB_VER=1.17
ARG SAMTOOLS_VER=1.17
ARG LOFREQ_VER=v2.1.5
ARG BCFTOOLS_VER=1.17
ARG IVAR_VER=1.4.3

RUN echo "Compiling HTSlib from https://github.com/samtools/htslib" && cd / \
    && git clone --branch ${HTSLIB_VER} https://github.com/samtools/htslib && cd htslib \
    && git submodule update --init --recursive \
    && autoreconf -i && ./configure && make && make install

RUN echo "Compiling samtools from https://github.com/samtools/samtools" && cd / \
    && git clone --branch ${SAMTOOLS_VER} https://github.com/samtools/samtools && cd samtools \
    && autoheader && autoconf -Wno-syntax && ./configure --prefix=/usr/local --with-htslib=/htslib && make && make install

RUN echo "Compiling lofreq from https://github.com/CSB5/lofreq" && cd / \
    && git clone --branch ${LOFREQ_VER} https://github.com/CSB5/lofreq && cd lofreq \
    && ./bootstrap && ./configure --with-htslib=/htslib && make && make install

RUN echo "Compiling bcftools from https://github.com/samtools/bcftools" && cd / \
    && git clone --branch ${BCFTOOLS_VER} https://github.com/samtools/bcftools && cd bcftools \
    && autoheader && autoconf && ./configure --with-htslib=/htslib && make && make install

RUN echo "Compiling iVar from https://github.com/andersen-lab/ivar" && cd / \
    && git clone --branch v${IVAR_VER} https://github.com/andersen-lab/ivar && cd ivar \
    && ./autogen.sh && ./configure \
    && make && make install \
    && ldconfig


# ------------------------------------------------------------------------------
# Final stage docker image
FROM debian:12

COPY --from=base_01 /usr/local/bin /usr/local/bin
COPY --from=base_01 /usr/local/include/* /usr/local/include/
COPY --from=base_01 /usr/local/lib/fastqc/ /usr/local/lib/fastqc
COPY --from=base_01 /usr/local/lib/picard.jar /usr/local/lib/picard.jar
COPY --from=base_01 /usr/local/lib/gatk /usr/local/lib/gatk
COPY --from=base_01 /opt/canu /opt/canu

COPY --from=base_02 /usr/local/bin /usr/local/bin
COPY --from=base_02 /usr/local/include/* /usr/local/include/
COPY --from=base_02 /usr/local/lib/* /usr/local/lib/

RUN apt-get update \
    && apt-get install --assume-yes --no-install-recommends \
    libcurl4-openssl-dev libncurses5-dev openjdk-17-jre libfindbin-libs-perl libgsl-dev isal pigz curl \
    python3-minimal python3-pip \
    && apt-get clean && apt-get purge --assume-yes && rm -rf /var/lib/apt/lists* \
    && ln -s /usr/bin/python3 /usr/bin/python \
    && ldconfig

CMD /usr/local/bin/linken
